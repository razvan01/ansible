input {
  file {
    path => "/var/log/domain-origin/cams.log"
    type => "log4j"
    tags => ["wowza-origin", "wowza"]
  }
#  file {
#    path => "/var/log/domain-origin/dbpool.log"
#    type => "log4j"
#    tags => ["wowza-origin", "dbpool"]
#  }
#  file {
#    path => "/var/log/domain-origin/server.log"
#    type => "log4j"
#    tags => ["wowza-origin", "server"]
#  }
}

filter {
  if [type] == "log4j" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }

    grok {
      match => [
        # stack traces
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+%{JAVACLASS:class} - %{DATA:log_message}\n(?<exception>%{JAVACLASS:exception_class}: %{DATA:exception_message}\n\s+at %{DATA:exception_origin}\n%{GREEDYDATA})",
        # catch all
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+%{JAVACLASS:class} - %{GREEDYDATA:log_message}"
      ]
    }
  }

  if [type] == "gc" {
    if [message] =~ ".*(?<gc_type>CMS-concurrent).*" {
      drop {}
    }

    grok {
      match => [
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>CMS)-(initial-|re)mark: [^,]*, (?<pause_duration>\d+\.\d+) secs%{GREEDYDATA})",
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>Full).*Perm[^,]+, (?<pause_duration>\d+\.\d+) secs%{GREEDYDATA})",
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>ParNew):([^,]*,){2} (?<pause_duration>\d+\.\d+) secs\]%{GREEDYDATA})",
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>failure)%{GREEDYDATA})"
      ]
    }

    ruby {
      code => "event['pause_duration'] = event['pause_duration'].to_f * 1000"
    }
  }

  date {
    match => [ "timestamp", "ISO8601"]
    remove_field => [ "timestamp" ]
  }

  if [log_message] {
    mutate {
      replace => ["message", "%{log_message}"]
      remove_field => "log_message"
    }
  }
}

output {
  elasticsearch {
    hosts => "http://elasticsearch.domainadmin.com:80"
    #protocol => "http"
    #port => 80
  }
}
