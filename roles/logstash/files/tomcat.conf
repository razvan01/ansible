input {
  file {
    path => "/var/log/tomcat/catalina.log"
    type => "log4j"
    tags => "web"
  }
  file {
    path => "/var/log/tomcat/localhost.log"
    type => "log4j"
    tags => "web"
  }
  file {
    path => "/var/log/tomcat/cams.log"
    type => "log4j"
    tags => "web"
  }
  file {
    path => "/var/log/tomcat/payments.log"
    type => "log4j"
    tags => "web"
  }
#  file {
#    path => "/var/log/tomcat/gc.log"
#    type => "gc"
#    tags => "web"
#  }
#  file {
#    path => "/var/log/tomcat/access_log"
#    type => "access"
#    tags => "web"
#  }
}

filter {
  if [type] == "log4j" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }

    grok {
      match => [
        # directory errors
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+%{JAVACLASS:class} - (?<log_message>HOST: (%{IPORHOST:directory_server}(?::%{POSINT:directory_port})?)(%{URIPATHPARAM:directory_query}) ERROR: %{DATA:error_message} Message: (?<directory_error>(Server returned HTTP response code: (?<http_response_code>\d{3}))?%{GREEDYDATA}))",
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+%{JAVACLASS:class} - (?<log_message>(?<error_message>.*?)\.?( \(| Server : )?%{URIPROTO}://(%{IPORHOST:directory_server}(?::%{POSINT:directory_port})?)(%{URIPATHPARAM:directory_query})?[\. ]? ((Retrying on another server )?(?<directory_error>Server returned HTTP response code: (?<http_response_code>\d{3})|.*))?)",
        # stack traces
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+%{JAVACLASS:class} - %{DATA:log_message}\n(?<exception>%{JAVACLASS:exception_class}: %{DATA:exception_message}\n\s+at %{DATA:exception_origin}\n%{GREEDYDATA})",
        # catch all
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+%{JAVACLASS:class} - %{GREEDYDATA:log_message}",
        # broken classes
        "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{SYSLOG5424SD:thread} %{LOGLEVEL:severity}\s+(?<class>(?:[a-zA-Z0-9-\[\]]+\.)+[A-Za-z0-9$_\[\]/]+) - %{GREEDYDATA:log_message}"
      ]
    }
  }

  if [type] == "gc" {
    if [message] =~ ".*(?<gc_type>CMS-concurrent).*" {
      drop {}
    }

    grok {
      match => [
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>CMS)-(initial-|re)mark: [^,]*, (?<pause_duration>\d+\.\d+) secs%{GREEDYDATA})",
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>Full).*Perm[^,]+, (?<pause_duration>\d+\.\d+) secs%{GREEDYDATA})",
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>ParNew):([^,]*,){2} (?<pause_duration>\d+\.\d+) secs\]%{GREEDYDATA})",
        "message", "%{TIMESTAMP_ISO8601:timestamp}: (?<log_message>%{GREEDYDATA}(?<gc_type>failure)%{GREEDYDATA})"
      ]
    }

    ruby {
      code => "event['pause_duration'] = event['pause_duration'].to_f * 1000"
    }
  }

  if [type] == "access" {
    grok {
      match => [
        "message", "%{COMBINEDAPACHELOG} (%{NUMBER:response_time:float})s",
        "message", "%{COMBINEDAPACHELOG}",
        "message", "%{COMMONAPACHELOG}"
      ]
    }
  }

  date {
    match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z", "ISO8601" ]
    remove_field => [ "timestamp" ]
  }
  if [log_message] {
    mutate {
      replace => ["message", "%{log_message}"]
      remove_field => "log_message"
    }
  }
}

output {
  elasticsearch {
    hosts => "http://elasticsearch.domainadmin.com:80"
#    port => "80"
#    protocol => "http"
  }
}
